{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","wordLengthFromServer","App","useState","isStarted","setIsStarted","isReversed","setIsReversed","NONE","sortType","setSortType","minLength","setMinLength","visibleGoods","goods","filter","good","length","sort","good1","good2","ALPABET","localeCompare","LENGTH","Error","reverse","getReorderedGoods","wordLengths","handleSort","type","className","Button","variant","onClick","current","color","FormControl","fullWidth","InputLabel","id","Select","labelId","value","label","onChange","event","target","handleSelectChange","map","MenuItem","ReactDOM","render","document","getElementById"],"mappings":"6KAWKA,E,8GAAAA,K,YAAAA,E,iBAAAA,E,iBAAAA,M,KAML,IAAMC,EAA4B,CAChC,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAGIC,EAAuB,CAC3B,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,IAkCK,IAAMC,EAAgB,WAC3B,MAAkCC,oBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAoCF,oBAAS,GAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KACA,EAAgCJ,mBAASJ,EAASS,MAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAkCP,mBAAS,GAA3C,mBAAOQ,EAAP,KAAkBC,EAAlB,KAEMC,EArCR,SACEC,EACAL,EACAH,EACAK,GAEA,IAAME,EAAe,YAAIC,GAAOC,QAAO,SAAAC,GAAI,OAAIA,EAAKC,QAAUN,KAsB9D,OApBAE,EAAaK,MAAK,SAACC,EAAOC,GACxB,OAAQX,GACN,KAAKV,EAASS,KACZ,OAAO,EAET,KAAKT,EAASsB,QACZ,OAAOF,EAAMG,cAAcF,GAE7B,KAAKrB,EAASwB,OACZ,OAAOJ,EAAMF,OAASG,EAAMH,OAE9B,QACE,MAAM,IAAIO,MAAM,uDAIlBlB,GACFO,EAAaY,UAGRZ,EASca,CACnB1B,EACAS,EACAH,EACAK,GAGIgB,EAAW,UAAO1B,GAElB2B,EAAa,SAACC,GAClBnB,EAAYmB,IAiBd,OACE,qBAAKC,UAAU,MAAf,SACI1B,EAYA,qCACE,sBAAK0B,UAAU,iBAAf,UACE,cAACC,EAAA,EAAD,CACEC,QAAQ,WACRH,KAAK,SACLC,UAAU,eACVG,QAAS,kBAAML,EAAW7B,EAASsB,UAJrC,iCAQA,cAACU,EAAA,EAAD,CACEC,QAAQ,WACRH,KAAK,SACLC,UAAU,eACVG,QAAS,kBAAML,EAAW7B,EAASwB,SAJrC,4BAQA,cAACQ,EAAA,EAAD,CACEC,QAAQ,WACRH,KAAK,SACLC,UAAU,eACVG,QAAS,WAjDnB1B,GAAc,SAAA2B,GAAO,OAAKA,MA6ClB,qBAQA,cAACH,EAAA,EAAD,CACEC,QAAQ,WACRG,MAAM,QACNN,KAAK,SACLC,UAAU,eACVG,QAAS,kBAtDnBvB,EAAYX,EAASS,MACrBD,GAAc,QACdK,EAAa,IA+CL,sBAWF,qBAAKkB,UAAU,mBAAf,SACE,eAACM,EAAA,EAAD,CAAaC,WAAS,EAAtB,UACE,cAACC,EAAA,EAAD,CAAYC,GAAG,sBAAf,wBACA,cAACC,EAAA,EAAD,CACEC,QAAQ,sBACRF,GAAG,gBACHG,MAAO/B,EACPgC,MAAM,MACNC,SAAU,SAAAC,GAAK,OA/DF,SAACA,GAC1BjC,GAAciC,EAAMC,OAAOJ,OA8DIK,CAAmBF,IALxC,SAOGlB,EAAYqB,KAAI,SAAA/B,GAAM,OACrB,cAACgC,EAAA,EAAD,CAAUP,MAAOzB,EAAjB,SAA0BA,cAMlC,oBAAIa,UAAU,QAAd,SACGjB,EAAamC,KAAK,SAAAhC,GAAI,OACrB,oBACEc,UAAU,cADZ,SAIGd,GAFIA,WArEb,qBAAKc,UAAU,0BAAf,SACE,cAACC,EAAA,EAAD,CACEC,QAAQ,WACRH,KAAK,SACLC,UAAU,eACVG,QAAS,kBAAM5B,GAAa,IAJ9B,wBC5GV6C,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.2fa47e61.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport {\n  Button,\n  FormControl,\n  InputLabel,\n  MenuItem,\n  Select,\n  SelectChangeEvent,\n} from '@mui/material';\n\nenum SortType {\n  NONE = 'none',\n  ALPABET = 'string',\n  LENGTH = 'number',\n}\n\nconst goodsFromServer: string[] = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nconst wordLengthFromServer = [\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  10,\n];\n\nfunction getReorderedGoods(\n  goods: string[],\n  sortType: SortType,\n  isReversed: boolean,\n  minLength: number,\n) {\n  const visibleGoods = [...goods].filter(good => good.length >= minLength);\n\n  visibleGoods.sort((good1, good2) => {\n    switch (sortType) {\n      case SortType.NONE:\n        return 0;\n\n      case SortType.ALPABET:\n        return good1.localeCompare(good2);\n\n      case SortType.LENGTH:\n        return good1.length - good2.length;\n\n      default:\n        throw new Error('unknown sort type in getReorderedGoods function');\n    }\n  });\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n}\n\nexport const App: React.FC = () => {\n  const [isStarted, setIsStarted] = useState(false);\n  const [isReversed, setIsReversed] = useState(false);\n  const [sortType, setSortType] = useState(SortType.NONE);\n  const [minLength, setMinLength] = useState(1);\n\n  const visibleGoods = getReorderedGoods(\n    goodsFromServer,\n    sortType,\n    isReversed,\n    minLength,\n  );\n\n  const wordLengths = [...wordLengthFromServer];\n\n  const handleSort = (type: SortType) => {\n    setSortType(type);\n  };\n\n  const handleReverse = () => {\n    setIsReversed(current => !current);\n  };\n\n  const handleReset = () => {\n    setSortType(SortType.NONE);\n    setIsReversed(false);\n    setMinLength(1);\n  };\n\n  const handleSelectChange = (event: SelectChangeEvent<number>) => {\n    setMinLength(+event.target.value);\n  };\n\n  return (\n    <div className=\"App\">\n      {!isStarted ? (\n        <div className=\"start-button__container\">\n          <Button\n            variant=\"outlined\"\n            type=\"button\"\n            className=\"start-button\"\n            onClick={() => setIsStarted(true)}\n          >\n            Start\n          </Button>\n        </div>\n      ) : (\n        <>\n          <div className=\"menu__controls\">\n            <Button\n              variant=\"outlined\"\n              type=\"button\"\n              className=\"menu__button\"\n              onClick={() => handleSort(SortType.ALPABET)}\n            >\n              Sort alphabetically\n            </Button>\n            <Button\n              variant=\"outlined\"\n              type=\"button\"\n              className=\"menu__button\"\n              onClick={() => handleSort(SortType.LENGTH)}\n            >\n              Sort by length\n            </Button>\n            <Button\n              variant=\"outlined\"\n              type=\"button\"\n              className=\"menu__button\"\n              onClick={() => handleReverse()}\n            >\n              Reverse\n            </Button>\n            <Button\n              variant=\"outlined\"\n              color=\"error\"\n              type=\"button\"\n              className=\"menu__button\"\n              onClick={() => handleReset()}\n            >\n              Reset\n            </Button>\n          </div>\n\n          <div className=\"select-container\">\n            <FormControl fullWidth>\n              <InputLabel id=\"length-select-label\">Min length</InputLabel>\n              <Select\n                labelId=\"length-select-label\"\n                id=\"length-select\"\n                value={minLength}\n                label=\"Age\"\n                onChange={event => handleSelectChange(event)}\n              >\n                {wordLengths.map(length => (\n                  <MenuItem value={length}>{length}</MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n          </div>\n\n          <ul className=\"Goods\">\n            {visibleGoods.map((good => (\n              <li\n                className=\"Goods__item\"\n                key={good}\n              >\n                {good}\n              </li>\n            )))}\n          </ul>\n        </>\n      )}\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}